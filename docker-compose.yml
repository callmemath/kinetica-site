version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kinetica-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - kinetica-network
    volumes:
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates (if using HTTPS)
    environment:
      - NODE_ENV=production

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: kinetica-backend
    restart: unless-stopped
    expose:
      - "3001"
    networks:
      - kinetica-network
    volumes:
      - backend-data:/app/data  # Persistent database storage
      - backend-logs:/app/logs  # Log storage
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=file:/app/data/production.db
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost}
      - JWT_SECRET=${JWT_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - FROM_EMAIL=${FROM_EMAIL}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - SESSION_TIMEOUT_MINUTES=${SESSION_TIMEOUT_MINUTES:-30}
      - LOG_LEVEL=${LOG_LEVEL:-error}
      - ENABLE_REQUEST_LOGGING=${ENABLE_REQUEST_LOGGING:-false}
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Backup Service (optional)
  db-backup:
    image: alpine:latest
    container_name: kinetica-backup
    restart: unless-stopped
    volumes:
      - backend-data:/data:ro
      - backup-data:/backup
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
    command: >
      sh -c "
        apk add --no-cache sqlite dcron &&
        echo '${BACKUP_SCHEDULE:-0 2 * * *} cp /data/production.db /backup/backup-$$(date +%Y%m%d_%H%M%S).db && find /backup -name \"backup-*.db\" -mtime +7 -delete' > /etc/crontabs/root &&
        crond -f -l 2
      "
    networks:
      - kinetica-network

networks:
  kinetica-network:
    driver: bridge

volumes:
  backend-data:
    driver: local
  backend-logs:
    driver: local
  backup-data:
    driver: local